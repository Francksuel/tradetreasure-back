generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  nickname         String       @unique @db.VarChar(20)
  password         String       @db.VarChar(255)
  code             String       @unique @db.VarChar(20)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Session          Session[]
  WantedPokemon    WantedPokemon[]
  AvailablePokemon AvailablePokemon[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pokemon {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(70)
  image            String   
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  WantedPokemon    WantedPokemon[]
  AvailablePokemon AvailablePokemon[]
}

model WantedPokemon {
  id            Int         @id @default(autoincrement())
  Pokemon       Pokemon    @relation(fields: [pokemonId], references: [id])
  pokemonId     Int
  userId        Int         @unique
  User          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Trade         Trade[]
}

model AvailablePokemon {
  id            Int         @id @default(autoincrement())
  Pokemon       Pokemon    @relation(fields: [pokemonId], references: [id])
  pokemonId     Int
  userId        Int         @unique
  User          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Trade         Trade[]
}

model Trade {
  id                 Int          @id @default(autoincrement())
  wantedPokemonId    Int
  WantedPokemon      WantedPokemon   @relation(fields: [wantedPokemonId], references: [id])
  availablePokemonId Int
  AvailablePokemon   AvailablePokemon   @relation(fields: [availablePokemonId], references: [id])
  requestingUserId   Int
  User               User   @relation(fields: [requestingUserId], references: [id])
  status             TradeStatus
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Payment            Payment[]
}

enum TradeStatus {
  REQUESTED
  REALIZED
  REJECTED
}
